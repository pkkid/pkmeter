#!/usr/bin/python3
# -*- coding: utf-8 -*-
import os
import sys
from argparse import ArgumentParser
from PySide2 import QtCore
from PySide2.QtCore import QUrl
from PySide2.QtGui import QGuiApplication
from PySide2.QtQml import qmlRegisterType
from PySide2.QtQml import QQmlApplicationEngine

# Add pkm to sys.path if not already there.
if os.path.dirname(__file__) not in sys.path:
    sys.path.append(os.path.dirname(__file__))

from pkm import ROOT, log


class PKMeterApplication:
    
    def __init__(self, opts):
        super(PKMeterApplication, self).__init__()
        log.info('Starting PKMeterApplication')
        self.opts = opts
        self._init_windows()

    def _init_windows(self):
        """ Init the main windows that may be displayed. """
        filepath = os.path.join(ROOT, 'qml', 'desktop.qml')
        self.engine = QQmlApplicationEngine()
        #self.engine.addImportPath(os.path.join(ROOT, 'qml'));
        self.window = self.engine.load(QUrl.fromLocalFile(filepath))
    
    @classmethod
    def start(cls, opts):
        app = QGuiApplication()
        _ = PKMeterApplication(opts)
        app.exec_()  # Start the event loop
        

if __name__ == '__main__':
    parser = ArgumentParser(description='PKMeter - Desktop System Monitor')
    parser.add_argument('--loglevel', default='INFO', help='Set the log level (DEBUG, INFO, WARN, ERROR).')
    opts = parser.parse_args()
    if opts.loglevel:
        log.setLevel(opts.loglevel)
    PKMeterApplication.start(opts)
